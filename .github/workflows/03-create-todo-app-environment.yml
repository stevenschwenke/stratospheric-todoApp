# This workflow deploys all resources that are specific to the Todo-App, but not the app itself.
name: 03 - Manually create the Todo-App environment

on:
  workflow_dispatch:
    inputs:
      environmentName:
        description: 'The name of the environment in which to deploy the Todo-App-specific environment resources.'
        required: true
        default: 'staging'
jobs:
  dummy-job:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-20.04
    name: Deploy the messaging stack
    steps:

      - name: Print dummy message
        run: echo 'This is just a dummy job. It will be replaced by the real jobs later in the course'

#  deploy-messaging-stack:
#    if: github.ref == 'refs/heads/main'
#    runs-on: ubuntu-20.04
#    name: Deploy the messaging stack
#    steps:
#
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - name: Set up JDK 11
#        uses: actions/setup-java@v1
#        with:
#          java-version: 11.0
#
#      - name: NPM install
#        run: cd cdk && npm install
#
#      - name: Deploy messaging stack
#        env:
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
#        run: |
#          cd cdk
#          npm run messaging:deploy -- -c environmentName=${{ github.event.inputs.environmentName }} -c applicationName=todo-app
#  deploy-database-stack:
#    if: github.ref == 'refs/heads/main'
#    runs-on: ubuntu-20.04
#    name: Deploy the database stack
#    steps:
#
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - name: Set up JDK 11
#        uses: actions/setup-java@v1
#        with:
#          java-version: 11.0
#
#      - name: NPM install
#        run: cd cdk && npm install
#
#      - name: Deploy database stack
#        env:
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
#        run: |
#          cd cdk
#          npm run database:deploy -- -c environmentName=${{ github.event.inputs.environmentName }} -c applicationName=todo-app
#  deploy-cognito-stack:
#    if: github.ref == 'refs/heads/main'
#    runs-on: ubuntu-20.04
#    name: Deploy the Cognito stack
#    steps:
#
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - name: Set up JDK 11
#        uses: actions/setup-java@v1
#        with:
#          java-version: 11.0
#
#      - name: NPM install
#        run: cd cdk && npm install
#
#      - name: Deploy Cognito stack
#        env:
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
#        run: |
#          cd cdk
#          npm run cognito:deploy -- -c environmentName=${{ github.event.inputs.environmentName }} -c applicationName=todo-app
#  deploy-activemq-stack:
#    if: github.ref == 'refs/heads/main'
#    runs-on: ubuntu-20.04
#    name: Deploy the ActiveMq stack
#    steps:
#
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - name: Set up JDK 11
#        uses: actions/setup-java@v1
#        with:
#          java-version: 11.0
#
#      - name: NPM install
#        run: cd cdk && npm install
#
#      - name: Deploy ActiveMq stack
#        env:
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
#        run: |
#          cd cdk
#          npm run activeMq:deploy -- -c environmentName=${{ github.event.inputs.environmentName }} -c applicationName=todo-app
#  deploy-sequencer-lambda:
#    if: github.ref == 'refs/heads/main'
#    runs-on: ubuntu-20.04
#    name: Deploy the Deployment Sequencer
#    steps:
#
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - name: Set up JDK 11
#        uses: actions/setup-java@v1
#        with:
#          java-version: 11.0
#
#      - name: NPM install
#        run: cd cdk && npm install
#
#      - name: Deploy Deployment Sequencer
#        env:
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
#        run: |
#          cd cdk
#          cd deployment-sequencer-lambda
#          npm install
#          npm run dist
#          cd ..
#          npm run deployment-sequencer:deploy -- -c applicationName=todo-app -c githubToken=${{ secrets.GH_API_TOKEN }}
#  deploy-monitoring-stack:
#    if: github.ref == 'refs/heads/main'
#    runs-on: ubuntu-20.04
#    name: Deploy the Monitoring stack
#    steps:
#
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - name: Set up JDK 11
#        uses: actions/setup-java@v1
#        with:
#          java-version: 11.0
#
#      - name: NPM install
#        run: cd cdk && npm install
#
#      - name: Deploy Monitoring stack
#        env:
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
#        run: |
#          cd cdk
#          npm run monitoring:deploy -- -c environmentName=${{ github.event.inputs.environmentName }} -c applicationName=todo-app
#  deploy-canary-stack:
#    if: github.ref == 'refs/heads/main'
#    runs-on: ubuntu-20.04
#    name: Deploy the Canary stack
#    steps:
#
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - name: Set up JDK 11
#        uses: actions/setup-java@v1
#        with:
#          java-version: 11.0
#
#      - name: NPM install
#        run: cd cdk && npm install
#
#      - name: Deploy Canary stack
#        env:
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
#        run: |
#          cd cdk
#          npm run canary:deploy -- -c environmentName=${{ github.event.inputs.environmentName }} -c applicationName=todo-app -c password=${{ secrets.CANARY_USER_PASSWORD }}
